/*
Оконные функции агрегирования представляют собой то же, что и агрегатные функции группировки,
но вместо применения к группам в групповых запросах они применяются к окнам,
определяемых в предложении OVER. Функция агрегирования должна применяться к наборам строк,
и ее не должно интересовать, какой механизм языка применен для определения набора.
Секционирование (PARTITION BY) разделяет набор запроса на секции и используется для ограничения (фильтрации).
Кадрирование определяется упорядочением внутри секции ORDER BY затем, на основе этого упорядочения,
можно выделить набор строк между двумя границами (ROW ... или RANGE ...).
 */

USE test;

CREATE TABLE Order_s
(
    [Code]     INT IDENTITY,
    [Date]     DATE,
    [Product]  NVARCHAR(50),
    [Quantity] INT,
    [Price]    MONEY,
    [Сost]     AS Price * Quantity
)
INSERT Order_s(Date, Product, Quantity, Price)
VALUES ('20160101', 'First', 5, 1),
       ('20160101', 'Second', 5, 1),
       ('20160102', 'Third', 2, 2),
       ('20160102', 'Fourth', 1, 2),
       ('20160103', 'Fourth', 4, 3),
       ('20160201', 'Third', 2, 4),
       ('20160202', 'Second', 7, 5),
       ('20160203', 'Fourth', 3, 6),
       ('20160301', 'Fourth', 1, 7),
       ('20160302', 'Third', 5, 8),
       ('20160303', 'Fourth', 2, 9),
       ('20170101', 'First', 1, 1),
       ('20170102', 'Third', 3, 4),
       ('20170103', 'Fourth', 5, 6),
       ('20170201', 'Second', 2, 9),
       ('20170202', 'Fourth', 3, 16),
       ('20170203', 'First', 4, 25),
       ('20170101', 'Fourth', 1, 36),
       ('20170102', 'Fourth', 5, 49),
       ('20170303', 'First', 1, 64)
GO

-- Запрос с применением предложения OVER.
SELECT *,
       SUM(Сost) OVER () AS result_all_time
FROM Order_s
GO
+----------+-------------+----------+------------+-------------+------------+-------------------+
|   code   |  Date       | Product  |  Quantity  |    price    |   Coat     |    result_all     |
+----------+-------------+----------+------------+-------------+------------+-------------------+
|    1     | 2016-01-01  | First    |     5      |    1.0000   |    5.0000  |      28.0000      |
|    2     | 2016-01-01  | Second   |     5      |    1.0000   |    5.0000  |      28.0000      |
|    3     | 2016-01-02  | Third    |     2      |    2.0000   |    4.0000  |      28.0000      |
|    4     | 2017-01-01  | Fourth   |     1      |    2.0000   |    2.0000  |      28.0000      |
|    5     | 2017-01-02  | Fourth   |     4      |    3.0000   |   12.0000  |      28.0000      |
+----------+-------------+----------+------------+-------------+------------+-------------------+

-- Секционирование по дате.
SELECT *,
       SUM(Сost) OVER (PARTITION BY YEAR(Date)) AS result_for_year
FROM Order_s
GO
+----------+-------------+----------+------------+-------------+------------+-------------------+
|   code   |  Date       | Product  |  Quantity  |    price    |   Coat     |  result_for_year  |
+----------+-------------+----------+------------+-------------+------------+-------------------+
|    1     | 2016-01-01  | First    |     5      |    1.0000   |    5.0000  |      14.0000      |
|    2     | 2016-01-01  | Second   |     5      |    1.0000   |    5.0000  |      14.0000      |
|    3     | 2016-01-02  | Third    |     2      |    2.0000   |    4.0000  |      14.0000      |
|    4     | 2017-01-01  | Fourth   |     1      |    2.0000   |    2.0000  |      10.0000      |
|    5     | 2017-01-02  | Fourth   |     4      |    2.0000   |    8.0000  |      10.0000      |
+----------+-------------+----------+------------+-------------+------------+-------------------+

-- Секционирование по году и месяцу.
SELECT *,
       SUM(Сost) OVER (PARTITION BY YEAR(Date), MONTH(Date)) AS result_for_month
FROM Order_s
GO
+----------+-------------+----------+------------+-------------+------------+-------------------+
|   code   |  Date       | Product  |  Quantity  |    price    |   Coat     |  result_for_month |
+----------+-------------+----------+------------+-------------+------------+-------------------+
|    1     | 2016-01-01  | First    |     5      |    1.0000   |    5.0000  |      14.0000      |
|    2     | 2016-01-01  | Second   |     5      |    1.0000   |    5.0000  |      14.0000      |
|    3     | 2016-01-02  | Third    |     2      |    2.0000   |    4.0000  |      14.0000      |
|    4     | 2017-01-01  | Fourth   |     1      |    2.0000   |    2.0000  |      10.0000      |
|    5     | 2017-01-02  | Fourth   |     4      |    2.0000   |    8.0000  |      10.0000      |
+----------+-------------+----------+------------+-------------+------------+-------------------+

-- Запрос на изменение данных в поле Quantity в таблице Order_s.
UPDATE Order_s
SET Quantity = 3
WHERE Code = 2
GO

-- Запрос с использованием разных условий секционирования.
SELECT *,
       SUM(Сost) OVER (PARTITION BY YEAR(Date), MONTH(Date)) AS result_for_month,
       SUM(Сost) OVER (PARTITION BY YEAR(Date))              AS result_for_year,
       SUM(Сost) OVER (PARTITION BY YEAR(Date), MONTH(Date)) /
       SUM(Сost) OVER (PARTITION BY YEAR(Date))              AS '%, result_for_month_of_year',
       SUM(Сost) OVER ()                                     AS result_for_all
FROM Order_s
GO
+------+------------+----------+------------+-----------+-----------+--------------+-------------+-----+--------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    | result_month | result_year |  %  |  result_all  |
+------+------------+----------+------------+-----------+-----------+--------------+-------------+-----+--------------+
|   1  | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |    8.0000    |    12.000   | 0.6 |    22.000    |
|   2  | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |    8.0000    |    12.000   | 0.6 |    22.000    |
|   3  | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |    4.0000    |    12.000   | 0.6 |    22.000    |
|   4  | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |   10.0000    |    10.000   |  1  |    22.000    |
|   5  | 2017-01-02 | Fourth   |     4      |   2.0000  |   8.0000  |   10.0000    |    10.000   |  1  |    22.000    |
+------+------------+----------+------------+-----------+-----------+--------------+-------------+-----+--------------+

-- Запрос с указанием накопления стоимости по каждой строке.
-- Запрос с использованием UNBOUNDED PRECEDING — указывает, что окно начинается с первой строки группы.
SELECT *,
       SUM(Сost) OVER (ORDER BY Date ROWS UNBOUNDED PRECEDING) AS result_with_accumulation
FROM Order_s
GO
+------+------------+----------+------------+-----------+-----------+-----------------------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    |  result_with_accumulation   |
+------+------------+----------+------------+-----------+-----------+-----------------------------+
|   1  | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |            5.0000           |
|   2  | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |            8.0000           |
|   3  | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |           12.0000           |
|   4  | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |           14.0000           |
|   5  | 2017-01-02 | Fourth   |     4      |   2.0000  |   8.0000  |           16.0000           |
+------+------------+----------+------------+-----------+-----------+-----------------------------+

-- Запрос с эквивалентной формой явному указанию обеих границ кадра.
-- Запрос с указанием верхней границы по текущую строку.
SELECT *,
       SUM(Сost) OVER (ORDER BY Date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS result_with_accumulation
FROM Order_s
GO

-- Запрос с указанием диапозона накопления.
SELECT *,
       SUM(Сost) OVER (ORDER BY Date RANGE UNBOUNDED PRECEDING) AS result_with_accumulation
FROM Order_s
GO
+------+------------+----------+------------+-----------+-----------+-----------------------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    |  result_with_accumulation   |
+------+------------+----------+------------+-----------+-----------+-----------------------------+
|   1  | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |            8.0000           |
|   2  | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |            8.0000           |
|   3  | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |           14.0000           |
|   4  | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |           14.0000           |
|   5  | 2017-01-02 | Fourth   |     4      |   2.0000  |   8.0000  |           16.0000           |
+------+------------+----------+------------+-----------+-----------+-----------------------------+

-- Запрос с сортировкой по началу года.
SELECT *,
       SUM(Сost) OVER (PARTITION BY YEAR(DAte)
           ORDER BY Date ROWS UNBOUNDED PRECEDING) AS accumulation_beginning_year
FROM Order_s
GO
+------+------------+----------+------------+-----------+-----------+-----------------------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    | accumulation_beginning_year |
+------+------------+----------+------------+-----------+-----------+-----------------------------+
|   1  | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |            8.0000           |
|   2  | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |            8.0000           |
|   3  | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |           14.0000           |
|   4  | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |            2.0000           |
|   5  | 2017-01-02 | Fourth   |     4      |   2.0000  |   8.0000  |           10.0000           |
+------+------------+----------+------------+-----------+-----------+-----------------------------+


-- Запрос с сортировкой по началу года и по началу месяца.
SELECT *,
       SUM(Сost) OVER (PARTITION BY YEAR(Date), MONTH(Date)
           ORDER BY Date ROWS UNBOUNDED PRECEDING) AS accumulation_year_mounth
FROM Order_s
GO
+------+------------+----------+------------+-----------+-----------+-----------------------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    |  accumulation_year_mounth   |
+------+------------+----------+------------+-----------+-----------+-----------------------------+
|   1  | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |            5.0000           |
|   2  | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |            8.0000           |
|   3  | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |           12.0000           |
|   4  | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |            2.0000           |
|   5  | 2017-01-02 | Fourth   |     4      |   2.0000  |   8.0000  |           10.0000           |
+------+------------+----------+------------+-----------+-----------+-----------------------------+

-- Запрос с указанием для каждого заказа сумму двух предыдущих стоимостей.
SELECT *,
       SUM(Сost) OVER (ORDER BY Date ROWS
           BETWEEN 2 PRECEDING AND 1 PRECEDING) AS two_preceding
FROM Order_s
GO
+------+------------+----------+------------+-----------+-----------+-----------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    |  two_preceding  |
+------+------------+----------+------------+-----------+-----------+-----------------+
|  1   | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |       null      |
|  2   | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |      5.0000     |
|  3   | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |      8.0000     |
|  4   | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |      7.0000     |
|  5   | 2017-01-02 | Fourth   |     4      |   2.0000  |   8.0000  |      6.0000     |
+------+------------+----------+------------+-----------+-----------+-----------------+

-- Запрос с указанием для каждого заказа сумму двух предыдущих стоимостей.
SELECT *,
       SUM(Сost)
           OVER (ORDER BY Date ROWS
               BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS sum_two_following
FROM Order_s
GO
+------+------------+----------+------------+-----------+-----------+-----------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    |  two_following  |
+------+------------+----------+------------+-----------+-----------+-----------------+
|  1   | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |      7.0000     |
|  2   | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |      6.0000     |
|  3   | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |     14.0000     |
|  4   | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |     20.0000     |
|  5   | 2017-01-02 | Fourth   |     4      |   2.0000  |  12.0000  |     43.0000     |
+------+------------+----------+------------+-----------+-----------+-----------------+

-- Запрос с указанием для каждого заказа сумму двух предыдущих стоимостей: предыдущего, текущего и последующего.
SELECT *,
       SUM(Сost)
           OVER (ORDER BY Date ROWS
               BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS sum_three_following
FROM Order_s
GO
+------+------------+----------+------------+-----------+-----------+-----------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    |  two_following  |
+------+------------+----------+------------+-----------+-----------+-----------------+
|  1   | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |      8.0000     |
|  2   | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |     12.0000     |
|  3   | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |      9.0000     |
|  4   | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |     18.0000     |
|  5   | 2017-01-02 | Fourth   |     4      |   2.0000  |  12.0000  |     22.0000     |
+------+------------+----------+------------+-----------+-----------+-----------------+

-- При необходимости указать сумму всех последующих заказов.
-- UNBOUNDED FOLLOWING – с помощью данной инструкции можно указать,
-- что окно заканчивается на последней строки секции.
-- UNBOUNDED FOLLOWING может быть указано только как конечная точка окна.
-- C конца таблицы цена это сумма предыдущей цены и её стоимости.
SELECT *,
       SUM(Сost)
           OVER (ORDER BY Date, Code ROWS
               BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS sum_all_following
FROM Order_s
ORDER BY Code
GO
+------+------------+----------+------------+-----------+-----------+-----------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    |  two_following  |
+------+------------+----------+------------+-----------+-----------+-----------------+
|  1   | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |    701.0000     |
|  2   | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |    698.0000     |
|  3   | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |    694.0000     |
|  4   | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |    692.0000     |
|  5   | 2017-01-02 | Fourth   |     4      |   2.0000  |  12.0000  |    680.0000     |
+------+------------+----------+------------+-----------+-----------+-----------------+

-- При необходимости указать сумму всех предыдущтх заказов.
-- UNBOUNDED PRECEDING – с помощью данной инструкции можно указать, что окно начинается с первой строки секции.
-- UNBOUNDED PRECEDING может быть указано только как начальная точка окна.
-- C конца таблицы цена это сумма предыдущей цены и её стоимости.
SELECT *,
       SUM(Сost)
           OVER (ORDER BY Date ROWS
               BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING ) AS sum_all_preceding
FROM Order_s
ORDER BY Code
GO
+------+------------+----------+------------+-----------+-----------+-------------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    | sum_all_preceding |
+------+------------+----------+------------+-----------+-----------+-------------------+
|  1   | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |       null        |
|  2   | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |      5.0000       |
|  3   | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |      8.0000       |
|  4   | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |     12.0000       |
|  5   | 2017-01-02 | Fourth   |     4      |   2.0000  |  12.0000  |     14.0000       |
+------+------------+----------+------------+-----------+-----------+-------------------+

-- Если с агрегатной оконной функцией используется предложение ORDER BY,
-- но предложение ROWS или RANGE не указаны,
-- то в качестве значения по умолчанию для рамки окна используется RANGE UNBOUNDED PRECEDING AND CURRENT ROW.
SELECT *,
       SUM(Сost) OVER (ORDER BY Date) AS result_accumulation
FROM Order_s
ORDER BY Code
GO
+------+------------+----------+------------+-----------+-----------+---------------------+
| code |  Date      | Product  |  Quantity  |   price   |   Coat    | result_accumulation |
+------+------------+----------+------------+-----------+-----------+---------------------+
|  1   | 2016-01-01 | First    |     5      |   1.0000  |   5.0000  |        8.0000       |
|  2   | 2016-01-01 | Second   |     3      |   1.0000  |   3.0000  |        8.0000       |
|  3   | 2016-02-01 | Third    |     2      |   2.0000  |   4.0000  |       14.0000       |
|  4   | 2017-01-01 | Fourth   |     1      |   2.0000  |   2.0000  |       14.0000       |
|  5   | 2017-01-02 | Fourth   |     4      |   2.0000  |  12.0000  |       26.0000       |
+------+------------+----------+------------+-----------+-----------+---------------------+
