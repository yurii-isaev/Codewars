/*
Ранжирующие функции — это функции, которые возвращают значение для каждой строки группы в результирующем наборе данных.
На практике они могут быть использованы, например, для простой нумерации списка,
составления рейтинга или постраничной выборки.
Функции ранжирования являются не детерминированными,
то есть при одних и тех же входных значениях они могут возвращать разный результат.

На данный момент имеется 4 функции ранжирования:
ROW_NUMBER()
Эта функция нумерует записи в указанном порядке внутри "окна". Но если в конструкции OVER опустить секцию PARTITION BY,
то за "окно" будет принята вся выборка - что дает возможность пронумеровать все записи в должном порядке.
Причем порядок нумерации может не совпадать с порядком записей в результирующей выборке,
то есть оператор ORDER BY внутри OVER(…), определяющий порядок сортировки записей внутри "окна",
и, соответственно, порядок нумерации записей может не совпадать с оператором ORDER BY в конструкции SELECT,
определяющей порядок выдачи записей клиенту. Нумерация всегда начинается с единицы.

RANK()
Эта функция предназначена для ранжирования записей внутри "окна",
но опять-таки, если колонка для группировки не задана явным образом,
то за "окно" принимается вся выборка. Это та же нумерация, что и в ROW_NUMBER(), которая начинается с той же единицы.
Различие в том, что одинаковые записи получают одинаковый номер,
а следующая отличающаяся от них запись получает такой номер, как если бы ROW_NUMBER() и использовалась,
и все предыдущие записи получили свои уникальные номера.
  Таким образом, образуется дырка в нумерации, равная количеству одинаковых записей минус единица.

DENSE_RANK()
Эта функция выполняет "плотное" ранжирование,
то есть делает ровно то же самое, что и предыдущая, но без дырок" в нумерации.

NTILE()
Данная функция позволяет разделить записи внутри "окна" на указанное количество групп.
Для каждой записи она вернет номер группы, к которой принадлежит данная запись.
Нумерация групп также начинается с единицы.
Если количество записей в "окне" не делится на количество групп,
то получится два типа групп с разным количеством записей, отличающимся на единицу,
при этом сначала будут выведены группы с большим количеством записей, а затем - с меньшим.
 */

USE AdventureWorks2014;

-- Нумеруем все строки в таблице по убыванию ключа LineTotal.
SELECT *,
       ROW_NUMBER() over (ORDER BY LineTotal DESC) AS NO
FROM Sales.SalesOrderDetail
GO

-- Если строки нумерации повторяются в таблице по убыванию ключа LineTotal,
-- то такие строки будут сортироваться по второму ключу SalesOrderDetailID по возрастанию.
SELECT *,
    ROW_NUMBER() over (ORDER BY LineTotal DESC, SalesOrderDetailID) AS NO
FROM Sales.SalesOrderDetail
GO

SELECT *,
       ROW_NUMBER() over (PARTITION BY SalesOrderID ORDER BY LineTotal) AS NO
FROM Sales.SalesOrderDetail
GO

USE test;

CREATE TABLE Металлы
(
    [Название (RU)]             NVARCHAR(20),
    [Название (LAT)]            NVARCHAR(20),
    [Химическое обозначение]    NVARCHAR(5),
    [Атомный вес]               DECIMAL(8, 4),
    [Температура плавления, °С] DECIMAL(6, 1),
    [Удельный вес, г/куб.см]    DECIMAL(8, 5)
)
INSERT INTO Металлы
VALUES ('Цинк', 'Zinc', 'Zn', 65.37, 419.5, 7.13),
       ('Алюминий', 'Aluminium', 'Al', 26.985, 659, 2.69808),
       ('Свинец', 'Lead', 'Pb', 207.19, 375.4, 11.337),
       ('Олово', 'Tin', 'Sn', 118.69, 231.9, 7.29),
       ('Медь', 'Cooper', 'Cu', 63.54, 1083, 8.96),
       ('Титан', 'Titanium', 'Ti', 47, 1668, 4.5),
       ('Никель', 'Nickel', 'Ni', 58.71, 1455, 8.91),
       ('Магний', 'Magnesium', 'Mg', 24, 650, 1.74),
       ('Ванадий', 'Vanadium', 'V', 6, 1900, 6.11),
       ('Вольфрам', 'Wolfram', 'W', 51, 1765, 7.19)
GO

-- Создание дубликатов металлов с атомным весом между 100 и 200.
INSERT INTO Металлы
SELECT *
FROM Металлы
WHERE [Атомный вес] BETWEEN 60 AND 200
GO

-- Найти повторяющтеся строки.
SELECT [Название (RU)],
       [Название (LAT)],
       [Химическое обозначение],
       [Атомный вес],
       COUNT(*) [Количество повторов]
FROM Металлы
GROUP BY [Название (RU)],
         [Название (LAT)],
         [Химическое обозначение],
         [Атомный вес]
HAVING COUNT(*) > 1
GO

-- Найти конкретные строки, при вотронении номера от 2.
SELECT ROW_NUMBER() over (PARTITION BY [Название (RU)]
    ORDER BY [Название (RU)]) AS No,
       [Название (RU)],
       [Название (LAT)],
       [Химическое обозначение],
       [Атомный вес]
FROM Металлы
GO

-- ВЫберем повторяющтеся строки при помощи производной таблицы.
SELECT *
FROM (SELECT ROW_NUMBER() over (
    PARTITION BY [Название (RU)]
    ORDER BY [Название (RU)]) AS No,
             [Название (RU)],
             [Название (LAT)],
             [Химическое обозначение],
             [Атомный вес]
      FROM Металлы) AS DT
WHERE No > 1
GO

-- ВЫберем повторяющтеся строки при помощи обобщенного табличного выражения.
WITH CTE AS (SELECT ROW_NUMBER() over (
    PARTITION BY [Название (RU)]
    ORDER BY [Название (RU)]) AS No,
                 [Название (RU)],
                 [Название (LAT)],
                 [Химическое обозначение],
                 [Атомный вес]
             FROM Металлы)
SELECT *
FROM CTE
WHERE No > 1
GO

-- Удалим повторяющтеся строки при помощи обобщенного табличного выражения.
WITH CTE AS (SELECT ROW_NUMBER() OVER
    (PARTITION BY [Название (RU)] ORDER BY [Название (RU)]) AS No,
                 [Название (RU)],
                 [Название (LAT)],
                 [Химическое обозначение],
                 [Атомный вес]
             FROM Металлы)
DELETE
FROM CTE
WHERE No > 1
GO

SELECT Product,
       Price,
       RANK() OVER (ORDER BY Price desc)       AS Rank,
       ROW_NUMBER() OVER (ORDER BY Price desc) AS Row_number
FROM dbo.Order_s
GO
+---------+---------+-------+------------+
| Product |  Price  | Rank  | Row_number |
+---------+---------+-------+------------+
| First   | 64.0000 |   1   |      1     |
| Fourth  | 49.0000 |   2   |      2     |
| Fourth  | 36.0000 |   3   |      3     |
| First   | 25.0000 |   4   |      4     |
| Fourth  | 16.0000 |   5   |      5     |
| Second  |  9.0000 |   6   |      6     |
| Fourth  |  9.0000 |   6   |      7     |
| Third   |  8.0000 |   8   |      8     |
| Fourth  |  7.0000 |   9   |      9     |
| Fourth  |  6.0000 |  10   |     10     |
| Fourth  |  6.0000 |  10   |     11     |
| Second  |  5.0000 |  12   |     12     |
| Third   |  4.0000 |  13   |     13     |
| Third   |  4.0000 |  13   |     14     |
| Fourth  |  3.0000 |  15   |     15     |
| Third   |  2.0000 |  16   |     16     |
| Fourth  |  2.0000 |  16   |     17     |
| First   |  1.0000 |  18   |     18     |
| Second  |  1.0000 |  18   |     19     |
| First   |  1.0000 |  18   |     20     |
+---------+---------+-------+------------+

-- Отличия нумерации RANK от ROW_NUMBER.
SELECT Product,
       Price,
       RANK() OVER (PARTITION BY Product ORDER BY Price DESC)       AS Rank,
       ROW_NUMBER() OVER (PARTITION BY Product ORDER BY Price DESC) AS Row_number
FROM dbo.Order_s
GO
+---------+---------+-------+------------+
| Product |  Price  | Rank  | Row_number |
+---------+---------+-------+------------+
| First   | 64.0000 |   1   |     1      |
| First   | 25.0000 |   2   |     2      |
| First   |  1.0000 |   3   |     3      |
| First   |  1.0000 |   3   |     4      |
| Fourth  | 49.0000 |   1   |     1      |
| Fourth  | 36.0000 |   2   |     2      |
| Fourth  | 16.0000 |   3   |     3      |
| Fourth  |  9.0000 |   4   |     4      |
| Fourth  |  7.0000 |   5   |     5      |
| Fourth  |  6.0000 |   6   |     6      |
| Fourth  |  6.0000 |   6   |     7      |
| Fourth  |  3.0000 |   8   |     8      |
| Fourth  |  2.0000 |   9   |     9      |
| Second  |  9.0000 |   1   |     1      |
| Second  |  5.0000 |   2   |     2      |
| Second  |  1.0000 |   3   |     3      |
| Third   |  8.0000 |   1   |     1      |
| Third   |  4.0000 |   2   |     2      |
| Third   |  4.0000 |   2   |     3      |
| Third   |  2.0000 |   4   |     4      |
+---------+---------+-------+------------+

SELECT Product,
       Price,
       DENSE_RANK() OVER (ORDER BY Price DESC) AS Dense_rank,
       ROW_NUMBER() OVER (ORDER BY Price DESC) AS Row_number
FROM dbo.Order_s
GO
+---------+---------+------------+------------+
| Product |  Price  | Dense_rank | Row_number |
+---------+---------+------------+------------+
| First   | 64.0000 |      1     |      1     |
| Fourth  | 49.0000 |      2     |      2     |
| Fourth  | 36.0000 |      3     |      3     |
| First   | 25.0000 |      4     |      4     |
| Fourth  | 16.0000 |      5     |      5     |
| Second  |  9.0000 |      6     |      6     |
| Fourth  |  9.0000 |      6     |      7     |
| Third   |  8.0000 |      7     |      8     |
| Fourth  |  7.0000 |      8     |      9     |
| Fourth  |  6.0000 |      9     |     10     |
| Fourth  |  6.0000 |      9     |     11     |
| Second  |  5.0000 |     10     |     12     |
| Third   |  4.0000 |     11     |     13     |
| Third   |  4.0000 |     11     |     14     |
| Fourth  |  3.0000 |     12     |     15     |
| Third   |  2.0000 |     13     |     16     |
| Fourth  |  2.0000 |     13     |     17     |
| First   |  1.0000 |     14     |     18     |
| Second  |  1.0000 |     14     |     19     |
| First   |  1.0000 |     14     |     20     |
+---------+---------+------------+------------+

SELECT Product,
       Price,
       NTILE(2) OVER (ORDER BY Price DESC) AS Ntile
FROM dbo.Order_s
GO
+---------+---------+------------+------------+
| Product |  Price  | Dense_rank |    Ntile   |
+---------+---------+------------+------------+
| First   | 64.0000 |      1     |      1     |
| Fourth  | 49.0000 |      2     |      1     |
| Fourth  | 36.0000 |      3     |      1     |
| First   | 25.0000 |      4     |      1     |
| Fourth  | 16.0000 |      5     |      1     |
| Second  |  9.0000 |      6     |      1     |
| Fourth  |  9.0000 |      6     |      1     |
| Third   |  8.0000 |      7     |      1     |
| Fourth  |  7.0000 |      8     |      1     |
| Fourth  |  6.0000 |      9     |      1     |
| Fourth  |  6.0000 |      9     |      2     |
| Second  |  5.0000 |     10     |      2     |
| Third   |  4.0000 |     11     |      2     |
| Third   |  4.0000 |     11     |      2     |
| Fourth  |  3.0000 |     12     |      2     |
| Third   |  2.0000 |     13     |      2     |
| Fourth  |  2.0000 |     13     |      2     |
| First   |  1.0000 |     14     |      2     |
| Second  |  1.0000 |     14     |      2     |
| First   |  1.0000 |     14     |      2     |
+---------+---------+------------+------------+
