/*
Два основных режима блокировок:
1.совмещаемые блокировки (shared locks);
2.монопольные блокировки (exclusive locks);
Ситуация, когда несколько прикладных пользовательских программ плновременно выполняют операции чтения и записи данных,
называется одновременным конкурентным доступом (concurrency).
Компонент Database Engine поддерживает две модели одновременного конкурентного доступа:
- пессимистический и оптимистический конкурентный доступ.

Уровень изоляции:
1. READ COMMITTED READ COMMIT имеет в свою очередь две формы.
Первая форма применяется в пессимистической модели одновременного конкурентного доступа.
Вторая READ COMMIT SNAPSHOT - оптимистический модели одновременного конкурентного доступа.
Этот уровень уже запрещает грязное чтение, в данном случае все процессы, запросившие данные,
которые изменяются в тот же момент в другой транзакции,
будут ждать завершения этой транзакции и подтверждения фиксации данных.
Данный уровень по умолчанию используется SQL сервером.
2. READ UNCOMMITTED.
3. REPEATABLE READ.
4. SERIALIZABLE
5. READ COMMIT SNAPSHOT.
6. SNAPSHOT.
*/

USE bank;

-- Отстанавливаем процесс транзакции другого сеанса.
KILL 51;

-- 1. Уровень изоляции READ UNCOMMITTED.
-- Читает неподтвержденные (незакомиченные) данные.
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

SET NOCOUNT ON;

-- Инструкция DВCC USEROPTIONS возвращает информацию о текущих значениях параметров инструкции SET,
-- включая значения уровня изоляции, которое возвращает в параметре ISOLATION LEVEL.

-- Можно вставить новую строку.
INSERT INTO Scores ([Account number], Owner, Balance)
VALUES ('333333333333', 'Sidorov', 3000);
GO

SELECT 'Состояние запроса'
                   AS 'Состояние',
       Owner,
       Balance,
       @@SPID      AS 'Процесс',
       @@TRANCOUNT AS 'Количество_транзакций'
FROM Scores
GO
+------------------------+---------+----------+---------+-----------------------+
| Состояние              |  Owner  |  Balance | Процесс | Количество_транзакций |
+------------------------+---------+----------+---------+-----------------------+
| Состояние запроса      | Ivanov  |   500.00 |    51   |            0          |
| Состояние запроса      | Petrov  |     0.00 |    51   |            0          |
| Состояние запроса      | Sidorov |  3000.00 |    51   |            0          |
+------------------------+---------+----------+---------+-----------------------+

-- Нельзя удалить вставленную строку из текущего сеанса
DELETE
FROM Scores
WHERE Owner = 'Sidorov'
GO

-- Нельзя удалить строку из сеанса транзакции
DELETE
FROM Scores
WHERE Owner = 'Petrov'
GO

-- Изменить счет Петрова нельзя, так как таблица счета заблокирована в другом сеансе.
UPDATE Scores
SET Balance += 200
WHERE Owner = 'Petrov'
GO

-- READ UNCOMMITTED - крайне нежелательный уровень изоляции.
-- Её используют в двух случаях:
-- 1. когда точность данных не представляет важности;
-- 2. когда данные редко подтвергаются изменению.

-- 2. Уровень изоляции READ COMMITTED.
-- Читает подтвержденные (закомиченные) данные.
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

-- Можно вставить новую строку.
INSERT INTO Scores ([Account number], Owner, Balance)
VALUES ('333333333333', 'Krylov', 4000);
GO

-- Нет возможности использовать SELECT, только с использованием WITH (READUNCOMMITTED) / WITH (NOLOCK);
SELECT 'Состояние запроса'
                   AS 'Состояние',
       Owner,
       Balance,
       @@SPID      AS 'Процесс',
       @@TRANCOUNT AS 'Количество_транзакций'
FROM Scores
GO
+------------------------+---------+----------+---------+-----------------------+
| Состояние              |  Owner  |  Balance | Процесс | Количество_транзакций |
+------------------------+---------+----------+---------+-----------------------+
| Состояние запроса      | Ivanov  |   500.00 |    51   |            0          |
| Состояние запроса      | Petrov  |     0.00 |    51   |            0          |
| Состояние запроса      | Sidorov |  3000.00 |    51   |            0          |
| Состояние запроса      | Krylov  |  4000.00 |    51   |            0          |
+------------------------+---------+----------+---------+-----------------------+

-- Нельзя удалить вставленную строку из текущего сеанса
DELETE
FROM Scores
WHERE Owner = 'Krylov'
GO

-- Нельзя удалить строку из сеанса транзакции
DELETE
FROM Scores
WHERE Owner = 'Petrov'
GO

-- Изменить счет Петрова нельзя, так как таблица счета заблокирована в другом сеансе.
UPDATE Scores
SET Balance += 200
WHERE Owner = 'Petrov'
GO

-- Читаем только подтвержденные дынные (будет ждать 1 секунду в ожидании снятия блокировки
-- и если за это время блокировка не будет снята,
-- то завершит запрос с оштбкой "Превышено время ожидания запроса на блокировку")

-- Указывает количество миллисекунд,
-- В течении которых инструкция ожидает снятия блокировки при обращении к заблоктрованным строкам.
SET LOCK_TIMEOUT 1000;

-- Возврат к значениям задержки по умолчанию.
SET LOCK_TIMEOUT -1;

-- Для реализации уровня READ UNCOMMITTED не для всего сеанса,
-- а в одной команде используется табличная подсказка READUNCOMMITTED.
-- Замените команду SELECT в коде предыдущего запроса на следующую,
-- которая содержит табличную подсказку WITH (READUNCOMMITTED).
-- Затем измените инструкцию, чтобы тспользовать табличную подсказку WITH (NOLOCK).
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
SELECT 'Состояние запроса'
                   AS 'Состояние',
       Owner,
       Balance,
       @@SPID      AS 'Процесс',
       @@TRANCOUNT AS 'Количество_транзакций'
FROM Scores WITH (READUNCOMMITTED);
-- аналогично
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
SELECT * FROM Scores WITH (NOLOCK);
