/*
Транзакция – это упорядоченное множество операций переводящих базу данных из одного состояния в другое.

Свойства транзакции:
Атомарность – все команды в транзакции либо полностью выполняются, и соответственно, фиксируются все изменения данных,
либо ничего не выполняется и ничего не фиксируется;
Согласованность – данные, в случае успешного выполнения транзакции,
должны соблюдать все установленные правила в части различных ограничений,
первичных и внешних ключей, определенных в базе данных;
Изоляция – механизм предоставления доступа к данным.
Транзакция изолирует данные, с которыми она работает, для того чтобы другие транзакции получали только согласованные данные;
Надежность – все внесенные изменения фиксируются в журнале транзакций и данные считаются надежными,
если транзакция была успешно завершена.
В случае сбоя SQL Server сверяет данные, записанные в базе данных,с журналом транзакций,
если есть успешно завершенные транзакции, которые не закончили процесс записи всех изменений в базу данных,
они будут выполнены повторно.
Все действия, выполненные не подтвержденными транзакциями, отменяются.

В T-SQL для управления транзакциями существуют следующие основные команды:
BEGIN TRANSACTION (BEGIN TRAN) – команда служит для определения начала транзакции.
В качестве параметра этой команде можно передать и название транзакции, полезно, если у Вас есть вложенные транзакции;

COMMIT TRANSACTION (COMMIT TRAN) – с помощью данной команды мы сообщаем SQL серверу об успешном завершении транзакции,
и о том, что все изменения, которые были выполнены, необходимо сохранить на постоянной основе;

ROLLBACK TRANSACTION (ROLLBACK TRAN) – служит для отмены всех изменений,
которые были внесены в процессе выполнения транзакции, например, в случае ошибки, мы откатываем все назад;

SAVE TRANSACTION (SAVE TRAN) – данная команда устанавливает промежуточную точку сохранения внутри транзакции,
к которой можно откатиться, в случае возникновения необходимости.

Режимы транзакций
Транзакция может начинаться в одном из трех режимов:
1. автофиксация (autocommit),
2. явный режим (explicit),
3. неявный режим (implicit).
По умолчанию для SQL Server принят режим автофиксации.
 */

CREATE DATABASE bank;

USE bank;

IF OBJECT_ID('Score', 'U') IS NOT NULL
    DROP TABLE Scores
GO

CREATE TABLE Scores
(
    [Account code]   INT IDENTITY PRIMARY KEY,
    [Account number] VARCHAR(13),
    [Owner]          NVARCHAR(50),
    [Balance]        MONEY DEFAULT (0),
    CONSTRAINT [the balance cannot be negative] CHECK ([Balance] >= 0),
    [Note]           NVARCHAR(255)
);
GO

exec sp_rename 'Scores.notes', Note, 'COLUMN';

TRUNCATE TABLE Scores;

INSERT INTO Scores ([Account number], Owner, Balance)
VALUES ('111111111111', 'Ivanov', 1000),
       ('222222222222', 'Petrov', 0)
GO

-- Ошибка отрицательного баланса.
UPDATE Scores
SET Balance =
        CASE Owner
            WHEN 'Ivanov' THEN Balance - 5000
            WHEN 'Petrov' THEN Balance + 5000
        END
WHERE Owner IN ('Ivanov', 'Petrov')
GO

-- Транзакция выполняется успешно и будет атоматически зафиксирована.
UPDATE Scores
SET Balance =
        CASE Owner
            WHEN 'Ivanov' THEN Balance - 500
            WHEN 'Petrov' THEN Balance + 500
        END
WHERE Owner IN ('Ivanov', 'Petrov')
GO

-- Включение режима неявных транзакций и отключение вывода сообщений о количестве измененных строк.
SET IMPLICIT_TRANSACTIONS ON;
SET NOCOUNT ON;

-- Проверка окрытых транзакций.
SELECT @@TRANCOUNT AS 'Количество_транзакций', XACT_STATE() AS 'Состояние_транзакций'
GO
+-----------------------+----------------------+
| Количество_транзакций | Состояние_транзакций |
+-----------------------+----------------------+
|            0          |           0          |
+-----------------------+----------------------+

-- Если есть окрытые транзакции, то окатываем их.
IF @@TRANCOUNT > 0 ROLLBACK;

-- Начальные условия.
SELECT 'До транзакции' AS 'Состояние',
       Owner,
       Balance,
       @@SPID          AS 'Процесс',
       @@TRANCOUNT     AS 'Количество_транзакций'
FROM Scores
GO

SELECT @@TRANCOUNT AS 'Количество_транзакций', XACT_STATE() AS 'Состояние_транзакций'
GO
+-----------------------+----------------------+
| Количество_транзакций | Состояние_транзакций |
+-----------------------+----------------------+
|            1          |           1          |
+-----------------------+----------------------+

-- Списание 500 со счета Иванова.
UPDATE Scores
SET Balance -= 500
WHERE Owner = 'Ivanov'
GO

-- Проверка условий.
SELECT 'Транзакция после первого UPDATE'
                    AS 'Состояние',
       Owner,
       Balance,
       @@SPID       AS 'Процесс',
       @@TRANCOUNT  AS 'Количество_транзакций',
       XACT_STATE() AS 'Состояние транзакции'
FROM Scores
GO

-- Добавление 500 на счет Петрова.
UPDATE Scores
SET Balance += 500
WHERE Owner = 'Petrov'
GO

-- Проверка условий.
SELECT 'Транзакция после второго UPDATE'
                    AS 'Состояние',
       Owner,
       Balance,
       @@SPID       AS 'Процесс',
       @@TRANCOUNT  AS 'Количество_транзакций',
       XACT_STATE() AS 'Состояние_транзакции'
FROM Scores
GO

-- Фиксируем транзакцию.
COMMIT TRANSACTION;

SELECT @@TRANCOUNT  AS 'Количество_транзакций',
       XACT_STATE() AS 'Состояние_транзакций'
GO
+-----------------------+----------------------+
| Количество_транзакций | Состояние_транзакций |
+-----------------------+----------------------+
|            0          |           0          |
+-----------------------+----------------------+

SET IMPLICIT_TRANSACTIONS OFF;

-- Проверка условий.
SELECT 'После окончания транзакции'
                    AS 'Состояние',
       Owner,
       Balance,
       @@SPID       AS 'Процесс',
       @@TRANCOUNT  AS 'Количество_транзакций',
       XACT_STATE() AS 'Состояние_транзакции'
FROM Scores
GO
+----------------------------+--------+----------+---------+-----------------------+----------------------+
| Состояние                  |  Owner |  Balance | Процесс | Количество_транзакций | Состояние_транзакции |
+----------------------------+--------+----------+---------+-----------------------+----------------------+
| После окончания транзакции | Ivanov | 500.0000 |    51   |            0          |           1          |
| После окончания транзакции | Petrov | 500.0000 |    51   |            0          |           1          |
+----------------------------+--------+----------+---------+-----------------------+----------------------+

TRUNCATE TABLE Scores;

INSERT INTO Scores ([Account number], Owner, Balance)
VALUES ('111111111111', 'Ivanov', 1000),
       ('222222222222', 'Petrov', 0)
GO

SET IMPLICIT_TRANSACTIONS ON;
SET NOCOUNT ON;

-- Списание 500 со счета Иванова.
UPDATE Scores
SET Balance -= 500
WHERE Owner = 'Ivanov'
GO

-- Проверка условий.
SELECT 'Транзакция после первого UPDATE'
                    AS 'Состояние',
       Owner,
       Balance,
       @@SPID       AS 'Процесс',
       @@TRANCOUNT  AS 'Количество_транзакций',
       XACT_STATE() AS 'Состояние_транзакции'
FROM Scores
GO

-- Добавление 500 на счет Петрова.
UPDATE Scores
SET Balance += 500
WHERE Owner = 'Petrov'
GO

-- Проверка условий.
SELECT 'Транзакция после второго UPDATE'
                    AS 'Состояние',
       Owner,
       Balance,
       @@SPID       AS 'Процесс',
       @@TRANCOUNT  AS 'Количество_транзакций',
       XACT_STATE() AS 'Состояние_транзакции'
FROM Scores
GO

--Откатываем транзакцию.
ROLLBACK TRANSACTION;

SELECT @@TRANCOUNT  AS 'Количество_транзакций',
       XACT_STATE() AS 'Состояние_транзакций'
GO
+-----------------------+----------------------+
| Количество_транзакций | Состояние_транзакций |
+-----------------------+----------------------+
|            0          |           0          |
+-----------------------+----------------------+

-- Отменяем режим неявных транзакций.
SET IMPLICIT_TRANSACTIONS OFF;

-- Удостоверяемся, что все вернулось в исходное состояние.
SELECT 'После отмены транзакции'
                    AS 'Состояние',
       Owner,
       Balance,
       @@SPID       AS 'Процесс',
       @@TRANCOUNT  AS 'Количество_транзакций',
       XACT_STATE() AS 'Состояние_транзакции'
FROM Scores
GO
+----------------------------+--------+-----------+---------+-----------------------+----------------------+
| Состояние                  |  Owner |  Balance  | Процесс | Количество_транзакций | Состояние_транзакции |
+----------------------------+--------+-----------+---------+-----------------------+----------------------+
| После окончания транзакции | Ivanov | 1000.0000 |    51   |            0          |           1          |
| После окончания транзакции | Petrov |      0.00 |    51   |            0          |           1          |
+----------------------------+--------+-----------+---------+-----------------------+----------------------+

-- Режим явных транзакций (implicit).
TRUNCATE TABLE Scores;

INSERT INTO Scores ([Account number], Owner, Balance)
VALUES ('111111111111', 'Ivanov', 1000),
       ('222222222222', 'Petrov', 0)
GO

SET NOCOUNT ON;
-- Состояние до начала транзакции.
SELECT 'Исходное состояние' AS 'Состояние',
       Owner,
       Balance,
       @@TRANCOUNT          AS 'Количество_транзакций'
FROM Scores
GO

-- BEGIN TRANSACTION - начало явной транзакции.
BEGIN TRANSACTION;
DECLARE @ErrorVar1 INT;
DECLARE @ErrorVar2 INT;

-- Вывод о количестве транзакций.
SELECT @@TRANCOUNT AS 'Количество_транзакций';

-- Первое действие по списанию денег со счета Иванова.
UPDATE Scores
SET Balance -= 1000
WHERE Owner = 'Ivanov'

-- Неструктурированная обработка ошибки с помошью функции @@ERROR
-- SELECT @ErrorVar1 = @@ERROR
SET @ErrorVar1 = @@ERROR -- переменная содержит код ошибки;

IF @ErrorVar1 <> 0 -- сравнивает код ошибки с 0
    PRINT 'Ошибка снятия денег со счета Иванова. Код ошибки ' +
          CAST(@ErrorVar1 AS NVARCHAR(5))
ELSE
    PRINT 'Деньги сняты со счета Иванова. '

-- Проверка состояния текущего счета.
SELECT 'После попытки снять 1000 у Иванова' AS 'Состояние',
       Owner,
       Balance,
       @@TRANCOUNT                          AS 'Количество_транзакций'
FROM Scores

-- Второе действие по добавлению денег на счет Петрова.
UPDATE Scores
SET Balance += 1000
WHERE Owner = 'Petrov'

-- Неструктурированная обработка оштбка с помошью функции @@ERROR
-- SELECT @ErrorVar2 = @@ERROR
SET @ErrorVar2 = @@ERROR;

IF @ErrorVar2 <> 0
    PRINT 'Ошибка добавления денег на счет Петрова. Код ошибки ' + CAST(@ErrorVar2 AS NVARCHAR(5))
ELSE
    PRINT 'Деньги добавлены на счет Петрова. '

-- Проверка состояния текущего счета после второго действия.
SELECT 'После попытки добавить 1000 Петрову' AS 'Состояние',
       Owner,
       Balance,
       @@TRANCOUNT                           AS 'Количество_транзакций'
FROM Scores

-- Фиксируем или откатываем транзакцию в зависимости от наличия ошибок в инструкциях снятия со счета Иванова
-- и добавления на счет Петрову
IF (@ErrorVar1 = 0) AND (@ErrorVar2 = 0)
    BEGIN
        PRINT 'Фиксация транзакции. Перевод денег со счета Иванова на счет Петрова успешно завершен.'
        COMMIT TRANSACTION
    END
-- Если хотя бы одна из команд вернула ошибку с кодом отличным от нуля
ELSE
    BEGIN
        PRINT 'Откат транзакции. Перевод денег со счета Иванова на счет Петрова не был выполнен.'
        ROLLBACK TRANSACTION
    END
-- Проверка состояния после транзакции.
SELECT 'После окончания транзакции' AS 'Состояние',
       Owner,
       Balance,
       @@TRANCOUNT                  AS 'Количество_транзакций'
FROM Scores
GO
+-------------------------------------+--------+------------+-----------------------+
|       Состояние                     | Owner  |  Balance   | Количество_транзакций |
+-------------------------------------+--------+------------+-----------------------+
| Исходное состояние                  | Ivanov |    0.0000  |          0            |
| Исходное состояние                  | Petrov |    0.0000  |          0            |
+-------------------------------------+--------+------------+-----------------------+

+-----------------------+
| Количество_транзакций |
+-----------------------+
|           1           |
+-----------------------+

+-------------------------------------+--------+------------+-----------------------+
|       Состояние                     | Owner  |  Balance   | Количество_транзакций |
+-------------------------------------+--------+------------+-----------------------+
| После попытки снять 1000 у Иванова  | Ivanov |    0.0000  |          1            |
| После попытки снять 1000 у Иванова  | Petrov |    0.0000  |          1            |
+-------------------------------------+--------+------------+-----------------------+

+-------------------------------------+--------+------------+-----------------------+
|       Состояние                     | Owner  |  Balance   | Количество_транзакций |
+-------------------------------------+--------+------------+-----------------------+
| После попытки добавить 1000 Петрову | Ivanov |    0.0000  |          1            |
| После попытки добавить 1000 Петрову | Petrov | 1000.0000  |          1            |
+-------------------------------------+--------+------------+-----------------------+

+-------------------------------------+--------+------------+-----------------------+
|       Состояние                     | Owner  |  Balance   | Количество_транзакций |
+-------------------------------------+--------+------------+-----------------------+
| После окончания транзакции          | Ivanov |    0.0000  |          0            |
| После окончания транзакции          | Petrov | 1000.0000  |          0            |
+-------------------------------------+--------+------------+-----------------------+
